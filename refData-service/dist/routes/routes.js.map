{"version":3,"sources":["../../src/routes/routes.js"],"names":["routes","RefDataService","require","pjson","config","refDataService","get","req","res","render","title","version","sendStatus","params","type","getEntitiesByType","then","response","end","JSON","stringify","message","catch","err","error","endsWith","status","getEntityBySymbol","symbol","console"],"mappings":";;;;;;AAAA;;AAEA,MAAMA,SAAS,sBAAf;AACA,MAAMC,iBAAiBC,QAAQ,2BAAR,CAAvB;AACA,MAAMC,QAAQD,QAAQ,oBAAR,CAAd;AACA,MAAME,SAASF,QAAQ,QAAR,CAAf;;AAEA,MAAMG,iBAAiB,IAAIJ,cAAJ,EAAvB;AACA;;;AAGAD,OAAOM,GAAP,CAAW,GAAX,EAAgB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5BA,MAAIC,MAAJ,CAAW,OAAX,EAAoB,EAAEC,OAAO,iBAAT,EAA4B,WAAWP,MAAMQ,OAA7C,EAApB;AACD,CAFD;;AAIAX,OAAOM,GAAP,CAAWF,OAAOE,GAAP,CAAW,0BAAX,CAAX,EAAmD,UAASC,GAAT,EAAcC,GAAd,EAAmB;AACpEA,MAAII,UAAJ,CAAe,GAAf;AACD,CAFD;;AAIA;;;AAGAZ,OAAOM,GAAP,CAAW,YAAX,EAAyB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACrC,MAAGD,IAAIM,MAAJ,CAAWC,IAAd,EAAoB;AAClBT,mBAAeU,iBAAf,CAAiCR,IAAIM,MAAJ,CAAWC,IAA5C,EAAkDE,IAAlD,CAAwDC,YAAY;AAClET,UAAIU,GAAJ,CAAQC,KAAKC,SAAL,CAAeH,SAASI,OAAxB,CAAR;AACD,KAFD,EAEGC,KAFH,CAESC,OAAO;AACd,UAAGA,IAAIC,KAAP,EAAc;AACZ,YAAGD,IAAIC,KAAJ,CAAUC,QAAV,CAAmB,kBAAnB,CAAH,EACEjB,IAAIkB,MAAJ,CAAW,GAAX;AACH;AACDlB,UAAIU,GAAJ,CAAQC,KAAKC,SAAL,CAAeG,GAAf,CAAR;AACD,KARD;AASD,GAVD,MAUO;AACLf,QAAIkB,MAAJ,CAAW,GAAX,EAAgBR,GAAhB,CAAoB,uDAApB;AACD;AACF,CAdD;;AAgBA;;;AAGAlB,OAAOM,GAAP,CAAW,oBAAX,EAAiC,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC7C,MAAGD,IAAIM,MAAJ,CAAWC,IAAd,EAAoB;AAClBT,mBAAesB,iBAAf,CAAiCpB,IAAIM,MAAJ,CAAWC,IAA5C,EAAkDP,IAAIM,MAAJ,CAAWe,MAA7D,EAAqEZ,IAArE,CAA2EC,YAAY;AACrFT,UAAIU,GAAJ,CAAQC,KAAKC,SAAL,CAAeH,SAASI,OAAxB,CAAR;AACD,KAFD,EAEGC,KAFH,CAESC,OAAO;AACdM,cAAQL,KAAR,CAAcD,GAAd;AACA,UAAGA,IAAIC,KAAJ,CAAUC,QAAV,CAAmB,kBAAnB,CAAH,EACEjB,IAAIkB,MAAJ,CAAW,GAAX;AACFlB,UAAIU,GAAJ,CAAQC,KAAKC,SAAL,CAAeG,GAAf,CAAR;AACD,KAPD;AAQD,GATD,MASO;AACLf,QAAIkB,MAAJ,CAAW,GAAX,EAAgBR,GAAhB,CAAoB,uDAApB;AACD;AACF,CAbD;;kBAeelB,M","file":"routes.js","sourcesContent":["import { Router } from 'express';\r\n\r\nconst routes = Router();\r\nconst RefDataService = require('../service/RefDataService');\r\nconst pjson = require('../../package.json');\r\nconst config = require('config')\r\n\r\nconst refDataService = new RefDataService();\r\n/**\r\n * GET home page\r\n */\r\nroutes.get('/', (req, res) => {\r\n  res.render('index', { title: 'RefData Service', 'version': pjson.version});\r\n});\r\n\r\nroutes.get(config.get('appConfig.healthCheckUrl'), function(req, res) {\r\n  res.sendStatus(200);\r\n});\r\n\r\n/**\r\n * GET reference entity by type\r\n */\r\nroutes.get('/ref/:type', (req, res) => {\r\n  if(req.params.type) {\r\n    refDataService.getEntitiesByType(req.params.type).then( response => {\r\n      res.end(JSON.stringify(response.message))\r\n    }).catch(err => {\r\n      if(err.error) {\r\n        if(err.error.endsWith('No records found'))\r\n          res.status(404)\r\n      }\r\n      res.end(JSON.stringify(err));\r\n    })\r\n  } else {\r\n    res.status(400).end('{\"success\" : false, error: \"type should be provided\"}')\r\n  }\r\n});\r\n\r\n/**\r\n * GET reference entity by symbol name\r\n */\r\nroutes.get('/ref/:type/:symbol', (req, res) => {\r\n  if(req.params.type) {\r\n    refDataService.getEntityBySymbol(req.params.type, req.params.symbol).then( response => {    \r\n      res.end(JSON.stringify(response.message))\r\n    }).catch(err => {\r\n      console.error(err)\r\n      if(err.error.endsWith('No records found'))\r\n        res.status(404)\r\n      res.end(JSON.stringify(err));\r\n    })\r\n  } else {\r\n    res.status(400).end('{\"success\" : false, error: \"type should be provided\"}')\r\n  }\r\n});\r\n\r\nexport default routes;\r\n"]}