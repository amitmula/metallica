{"version":3,"sources":["../../src/service/RefDataService.js"],"names":["request","require","mongoDB","RefDataService","constructor","console","log","getEntitiesByType","type","getEntityBySymbol","symbol","query","Promise","resolve","reject","onConnect","err","db","objectId","success","error","collection","find","_id","toArray","mongoRes","length","message","errorMsg","close","module","exports"],"mappings":";;AAAA,MAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,MAAMC,UAAUD,QAAQ,eAAR,CAAhB;;AAEA,MAAME,cAAN,CAAqB;AACjBC,kBAAc;AACXC,gBAAQC,GAAR,CAAY,oCAAZ;AACF;;AAEDC,sBAAkBC,IAAlB,EAAwB;AACpB,eAAO,KAAKC,iBAAL,CAAuBD,IAAvB,EAA6B,IAA7B,CAAP;AACH;;AAEDC,sBAAkBD,IAAlB,EAAwBE,MAAxB,EAAgC;AAC5B,YAAIC,QAAQD,SAAS,EAACA,MAAD,EAAT,GAAoB,EAAhC;AACA,eAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCZ,oBAAQa,SAAR,CAAkB,CAACC,GAAD,EAAMC,EAAN,EAAUC,QAAV,KAAuB;AACrC,oBAAIF,GAAJ,EAAS;AACLF,2BAAO;AACHK,iCAAS,OADN,EACeC,OAAQJ;AADvB,qBAAP;AAGH,iBAJD,MAKK;AACDC,uBAAGI,UAAH,CAAcb,IAAd,EAAoBc,IAApB,CAAyBX,KAAzB,EAAgC,EAACY,KAAI,CAAL,EAAhC,EAAyCC,OAAzC,CAAiD,CAACR,GAAD,EAAMS,QAAN,KAAmB;AAChE,4BAAGT,GAAH,EAAQ;AACJF,mCAAO;AACHK,yCAAS,OADN,EACeC,OAAQJ;AADvB,6BAAP;AAGH;AACD,4BAAGS,SAASC,MAAT,GAAkB,CAArB,EAAwB;AACpBb,oCAAQ;AACJM,yCAAS,IADL;AAEJQ,yCAAUjB,SAASe,SAAS,CAAT,CAAT,GAAuBA;AAF7B,6BAAR;AAIH,yBALD,MAKO;AACH,gCAAIG,WAAWlB,SAAS,YAAYA,MAArB,GAA8B,UAAUF,IAAvD;AACAM,mCAAO;AACHK,yCAAS,OADN;AAEHC,uCAAQQ,WAAW;AAFhB,6BAAP;AAIH;AACDX,2BAAGY,KAAH;AACH,qBAnBD;AAoBH;AACJ,aA5BD;AA6BH,SA9BM,CAAP;AA+BH;AA1CgB;;AA6CrBC,OAAOC,OAAP,GAAiB5B,cAAjB","file":"RefDataService.js","sourcesContent":["const request = require('request');\r\nconst mongoDB = require('../db/mongoDB');\r\n\r\nclass RefDataService {\r\n    constructor() {\r\n       console.log('refData service constructor called')\r\n    }\r\n    \r\n    getEntitiesByType(type) {\r\n        return this.getEntityBySymbol(type, null)\r\n    }\r\n\r\n    getEntityBySymbol(type, symbol) {\r\n        let query = symbol ? {symbol} : {} \r\n        return new Promise((resolve, reject) => {\r\n            mongoDB.onConnect((err, db, objectId) => {\r\n                if (err) {\r\n                    reject({\r\n                        success: 'false', error : err\r\n                    })\r\n                }\r\n                else {\r\n                    db.collection(type).find(query, {_id:0}).toArray((err, mongoRes) => {\r\n                        if(err) {\r\n                            reject({\r\n                                success: 'false', error : err\r\n                            })\r\n                        }\r\n                        if(mongoRes.length > 0) {\r\n                            resolve({\r\n                                success: true,\r\n                                message : symbol ? mongoRes[0] : mongoRes\r\n                            })\r\n                        } else {\r\n                            let errorMsg = symbol ? 'symbol-' + symbol : 'type-' + type\r\n                            reject({\r\n                                success: 'false', \r\n                                error : errorMsg + ' not found'\r\n                            })\r\n                        }\r\n                        db.close();\r\n                    });\r\n                }\r\n            });\r\n        })\r\n    }\r\n}\r\n\r\nmodule.exports = RefDataService;\r\n"]}