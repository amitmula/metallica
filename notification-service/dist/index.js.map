{"version":3,"sources":["../src/index.js"],"names":["Eureka","require","config","socketio","NotificationService","appPort","get","process","env","client","instance","app","hostName","ipAddr","port","vipAddress","statusPageUrl","dataCenterInfo","name","eureka","host","servicePath","fetchRegistry","registerWithEureka","maxRetries","server","listen","console","log","lookup","hostname","err","add","fam","healthCheckUrl","logger","level","start","error","JSON","stringify","io","TRADE_MODIFIED","channel","MARKET_DATA_MODIFIED","NOTIFICATION_TYPE","marketDataModified","tradeDataModified","on","clientConnection","id","handshake","headers","conn","upgraded","upgrading","channelName","callback","join","notificationService","module","exports"],"mappings":";;AAAA;;;;;;AACA,MAAMA,SAASC,QAAQ,kBAAR,EAA4BD,MAA3C;AACA,MAAME,SAASD,QAAQ,QAAR,CAAf;AACA,MAAME,WAAWF,QAAQ,WAAR,CAAjB;AACA,MAAMG,sBAAsBH,QAAQ,+BAAR,CAA5B;;AAEA,MAAM,EAAEI,UAAUH,OAAOI,GAAP,CAAW,gBAAX,CAAZ,KAA6CC,QAAQC,GAA3D;AACA,MAAMC,SAAS,IAAIT,MAAJ,CAAW;AACxBU,YAAU;AACRC,SAAKT,OAAOI,GAAP,CAAW,iBAAX,CADG;AAERM,cAAU,WAFF;AAGRC,YAAQ,WAHA;AAIRC,UAAM;AACJ,WAAKT,OADD;AAEJ,kBAAY;AAFR,KAJE;AAQRU,gBAAYb,OAAOI,GAAP,CAAW,iBAAX,CARJ;AASRU,mBAAe,sBAAsBX,OAAtB,GAAgCH,OAAOI,GAAP,CAAW,0BAAX,CATvC;AAURW,oBAAgB;AACd,gBAAU,wDADI;AAEdC,YAAM;AAFQ;AAVR,GADc;AAgBxBC,UAAQ;AACNC,UAAMlB,OAAOI,GAAP,CAAW,mBAAX,CADA;AAENQ,UAAMZ,OAAOI,GAAP,CAAW,mBAAX,CAFA;AAGNe,iBAAanB,OAAOI,GAAP,CAAW,0BAAX,CAHP;AAINgB,mBAAepB,OAAOI,GAAP,CAAW,4BAAX,CAJT;AAKNiB,wBAAoBrB,OAAOI,GAAP,CAAW,iCAAX,CALd;AAMNkB,gBAAYtB,OAAOI,GAAP,CAAW,yBAAX;AANN;AAhBgB,CAAX,CAAf;AAyBA,IAAImB,SAAS,cAAIC,MAAJ,CAAWrB,OAAX,EAAoB,MAAM;AACrCsB,UAAQC,GAAR,CAAY,oBAAZ,EAAkCvB,OAAlC;AACAJ,UAAQ,KAAR,EAAe4B,MAAf,CAAsB5B,QAAQ,IAAR,EAAc6B,QAAd,EAAtB,EAAgD,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,GAApB,EAAyB;AACvE,QAAIF,GAAJ,EAAS,MAAMA,GAAN;AACT,QAAIG,iBAAiB,YAAYF,GAAZ,GAAkB,GAAlB,GAAwB3B,OAAxB,GAAkCH,OAAOI,GAAP,CAAW,0BAAX,CAAvD;AACAqB,YAAQC,GAAR,CAAY,oBAAZ,EAAkCM,cAAlC;AACAzB,WAAO0B,MAAP,CAAcC,KAAd,CAAoB,OAApB;AACA3B,WAAO4B,KAAP,CAAa,UAAUC,KAAV,EAAiB;AAC5BX,cAAQC,GAAR,CAAYW,KAAKC,SAAL,CAAeF,KAAf,KAAyB,8BAArC;AACD,KAFD;AAGD,GARD;AASD,CAXY,CAAb;;AAaA,MAAMG,KAAKtC,SAASsB,MAAT,CAAX;;AAEA,MAAMiB,iBAAiB;AACtBC,WAAS;AADa,CAAvB;;AAIA,MAAMC,uBAAuB;AAC5BD,WAAS;AADmB,CAA7B;;AAIA,MAAME,oBAAoB;AACxBC,sBAAoBF,oBADI;AAExBG,qBAAmBL;AAFK,CAA1B;;AAMAD,GAAGO,EAAH,CAAM,SAAN,EAAiB,UAAUC,gBAAV,EAA4B;AAC3CtB,UAAQC,GAAR,CAAY,6CAAZ,EAA2DqB,iBAAiBC,EAA5E;AACAvB,UAAQC,GAAR,CAAY,kDAAZ,EAAgEqB,iBAAiBE,SAAjB,CAA2BC,OAA3F;AACAzB,UAAQC,GAAR,CAAY,0CAAZ,EAAwDqB,iBAAiBI,IAAjB,CAAsBC,QAA9E;AACA3B,UAAQC,GAAR,CAAY,2CAAZ,EAAyDqB,iBAAiBI,IAAjB,CAAsBE,SAA/E;;AAEAN,mBAAiBD,EAAjB,CAAoB,cAApB,EAAoC,UAAUQ,WAAV,EAAuBC,QAAvB,EAAiC;AACnER,qBAAiBS,IAAjB,CAAsBb,kBAAkBW,WAAlB,EAA+Bb,OAArD,EAA8Dc,SAAS,YAAYD,WAArB,CAA9D;AACA7B,YAAQC,GAAR,CAAY,QAAZ,EAAsBqB,iBAAiBC,EAAvC,EAA2C,uBAA3C,EAAoEL,kBAAkBW,WAAlB,EAA+Bb,OAAnG;AACD,GAHD;AAKD,CAXD;;AAaAF,GAAGO,EAAH,CAAM,YAAN,EAAoB,YAAY;AAC9BrB,UAAQC,GAAR,CAAY,0BAAZ;AACD,CAFD;AAGA,MAAM+B,sBAAsB,IAAIvD,mBAAJ,CAAwBqC,EAAxB,CAA5B;AACAmB,OAAOC,OAAP,GAAiB,EAAEpB,EAAF,EAAMhB,MAAN,EAAjB","file":"index.js","sourcesContent":["import app from './app/app';\r\nconst Eureka = require('eureka-js-client').Eureka;\r\nconst config = require('config');\r\nconst socketio = require('socket.io');\r\nconst NotificationService = require('./service/NotificationService');\r\n\r\nconst { appPort = config.get('appConfig.port') } = process.env;\r\nconst client = new Eureka({\r\n  instance: {\r\n    app: config.get('appConfig.appId'),\r\n    hostName: 'localhost',\r\n    ipAddr: '127.0.0.1',\r\n    port: {\r\n      '$': appPort,\r\n      '@enabled': 'true',\r\n    },\r\n    vipAddress: config.get('appConfig.appId'),\r\n    statusPageUrl: 'http://localhost:' + appPort + config.get('appConfig.healthCheckUrl'),\r\n    dataCenterInfo: {\r\n      '@class': 'com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo',\r\n      name: 'MyOwn',\r\n    },\r\n  },\r\n  eureka: {\r\n    host: config.get('eurekaConfig.host'),\r\n    port: config.get('eurekaConfig.port'),\r\n    servicePath: config.get('eurekaConfig.servicePath'),\r\n    fetchRegistry: config.get('eurekaConfig.fetchRegistry'),\r\n    registerWithEureka: config.get('eurekaConfig.registerWithEureka'),\r\n    maxRetries: config.get('eurekaConfig.maxRetries')\r\n  },\r\n});\r\nlet server = app.listen(appPort, () => {\r\n  console.log('Listening on port ', appPort)\r\n  require('dns').lookup(require('os').hostname(), function (err, add, fam) {\r\n    if (err) throw err;\r\n    var healthCheckUrl = 'http://' + add + ':' + appPort + config.get('appConfig.healthCheckUrl');\r\n    console.log('healthCheckUrl -->', healthCheckUrl)\r\n    client.logger.level('debug');\r\n    client.start(function (error) {\r\n      console.log(JSON.stringify(error) || 'Eureka registration complete');\r\n    });\r\n  });\r\n});\r\n\r\nconst io = socketio(server);\r\n\r\nconst TRADE_MODIFIED = {\r\n\tchannel: 'trade data modified'\r\n};\r\n\r\nconst MARKET_DATA_MODIFIED = {\r\n\tchannel: 'market data modified'\r\n};\r\n\r\nconst NOTIFICATION_TYPE = {\r\n  marketDataModified: MARKET_DATA_MODIFIED,\r\n  tradeDataModified: TRADE_MODIFIED\r\n};\r\n\r\n\r\nio.on('connect', function (clientConnection) {\r\n  console.log('-----> new socket connection with client id', clientConnection.id);\r\n  console.log('-----> new socket connection with client headers', clientConnection.handshake.headers);\r\n  console.log('-----> connection upgraded from polling?', clientConnection.conn.upgraded);\r\n  console.log('-----> connection upgrading from polling?', clientConnection.conn.upgrading);\r\n\r\n  clientConnection.on('join channel', function (channelName, callback) {\r\n    clientConnection.join(NOTIFICATION_TYPE[channelName].channel, callback(\"joined \" + channelName));\r\n    console.log('client', clientConnection.id, 'joined socket channel', NOTIFICATION_TYPE[channelName].channel);\r\n  });\r\n\r\n});\r\n\r\nio.on('disconnect', function () {\r\n  console.log('connection disconnected.');\r\n});\r\nconst notificationService = new NotificationService(io);\r\nmodule.exports = { io, server };\r\n"]}