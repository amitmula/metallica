{"version":3,"sources":["../../src/mq/mqConsumer.js"],"names":["amqp","require","config","TRADE_MODIFIED","channel","MARKET_DATA_MODIFIED","exports","startConsumers","args","topicKey","io","connStr","get","connect","err","conn","createChannel","ch","ex","assertExchange","durable","assertQueue","exclusive","q","console","log","queue","forEach","key","bindQueue","consume","msg","in","emit","content","toString","fields","routingKey","noAck"],"mappings":";;AAAA,MAAMA,OAAOC,QAAQ,sBAAR,CAAb;AACA,MAAMC,SAASD,QAAQ,QAAR,CAAf;AACA,MAAME,iBAAiB;AACtBC,UAAS;AADa,CAAvB;;AAIA,MAAMC,uBAAuB;AAC5BD,UAAS;AADmB,CAA7B;;AAIAE,QAAQC,cAAR,GAAyB,CAACC,IAAD,EAAOC,QAAP,EAAiBC,EAAjB,KAAwB;AAC/C,KAAIC,UAAU,YAAYT,OAAOU,GAAP,CAAW,mBAAX,CAAZ,GAA8C,GAA9C,GAAoDV,OAAOU,GAAP,CAAW,mBAAX,CAAlE;AACDZ,MAAKa,OAAL,CAAaF,OAAb,EAAsB,CAACG,GAAD,EAAMC,IAAN,KAAe;AACpCA,OAAKC,aAAL,CAAmB,CAACF,GAAD,EAAMG,EAAN,KAAa;AAC9B,OAAIC,KAAK,WAAWT,QAApB;AACAQ,MAAGE,cAAH,CAAkBD,EAAlB,EAAsB,OAAtB,EAA+B,EAACE,SAAS,KAAV,EAA/B;AACAH,MAAGI,WAAH,CAAe,EAAf,EAAmB,EAACC,WAAW,IAAZ,EAAnB,EAAsC,CAACR,GAAD,EAAMS,CAAN,KAAY;AACjDC,YAAQC,GAAR,CAAY,uDAAZ,EAAqEF,EAAEG,KAAvE;AACAlB,SAAKmB,OAAL,CAAa,UAASC,GAAT,EAAc;AAC1BX,QAAGY,SAAH,CAAaN,EAAEG,KAAf,EAAsBR,EAAtB,EAA0BU,GAA1B;AACA,KAFD;AAGAX,OAAGa,OAAH,CAAWP,EAAEG,KAAb,EAAoB,UAASK,GAAT,EAAc;AAC3B;AACNrB,QAAGsB,EAAH,CAAM7B,eAAeC,OAArB,EAA8B6B,IAA9B,CAAmC,qBAAnC,EAA0DF,IAAIG,OAAJ,CAAYC,QAAZ,EAA1D;AACAX,aAAQC,GAAR,CAAY,cAAZ,EAA4BM,IAAIK,MAAJ,CAAWC,UAAvC,EAAmDN,IAAIG,OAAJ,CAAYC,QAAZ,EAAnD;AACA,KAJD,EAIG,EAACG,OAAO,IAAR,EAJH;AAKA,IAVD;AAWA,GAdF;AAeA,EAhBD;AAiBA,CAnBD","file":"mqConsumer.js","sourcesContent":["const amqp = require('amqplib/callback_api');\r\nconst config = require('config')\r\nconst TRADE_MODIFIED = {\r\n\tchannel: 'trade data modified'\r\n};\r\n\r\nconst MARKET_DATA_MODIFIED = {\r\n\tchannel: 'market data modified'\r\n};\r\n\r\nexports.startConsumers = (args, topicKey, io) => {\r\n  let connStr = 'amqp://' + config.get('RabbitConfig.host') + ':' + config.get('RabbitConfig.port')\r\n\tamqp.connect(connStr, (err, conn) => {\r\n\t\tconn.createChannel((err, ch) => {\r\n\t\t\t\tvar ex = 'topic_' + topicKey;\r\n\t\t\t\tch.assertExchange(ex, 'topic', {durable: false});\r\n\t\t\t\tch.assertQueue('', {exclusive: true}, (err, q) => {\r\n\t\t\t\t\tconsole.log(' [*] Waiting for messages in %s. To exit press CTRL+C', q.queue);\r\n\t\t\t\t\targs.forEach(function(key) {\r\n\t\t\t\t\t\tch.bindQueue(q.queue, ex, key);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tch.consume(q.queue, function(msg) {\r\n            //marketData updates here\r\n\t\t\t\t\t\tio.in(TRADE_MODIFIED.channel).emit('trade data modified', msg.content.toString());  \r\n\t\t\t\t\t\tconsole.log(\" [x] %s:'%s'\", msg.fields.routingKey, msg.content.toString());\r\n\t\t\t\t\t}, {noAck: true});\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t});\r\n}\r\n"]}