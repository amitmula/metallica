{"version":3,"sources":["../../src/service/MarketDataService.js"],"names":["request","require","mongoDB","MarketDataService","constructor","priceRefreshInterval","priceBracket","marketDataMap","getNewPrice","Math","floor","random","max","min","setCommodityPrices","_commodityPrices","console","log","JSON","stringify","Promise","resolve","reject","map","metalPrice","setCommodityPrice","symbol","price","sendDataToMessageBroker","success","message","getCommodityPrices","query","onConnect","err","db","objectId","error","stack","collection","find","_id","toArray","mongoRes","length","metal","Object","keys","includes","data","marketData","options","url","method","json","response","body","module","exports"],"mappings":"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","file":"MarketDataService.js","sourcesContent":["const request = require('request');\r\nconst mongoDB = require('../db/mongoDB');\r\n\r\nclass MarketDataService {\r\n  constructor() {\r\n    this.priceRefreshInterval = 60 * 1000;\r\n    this.priceBracket = {\"min\": 1500, \"max\": 2600};\r\n    this.marketDataMap = {}\r\n  }\r\n\r\n  getNewPrice() {\r\n    return Math.floor(Math.random() * (this.priceBracket.max - this.priceBracket.min)) + this.priceBracket.min;\r\n  }\r\n\r\n  setCommodityPrices(_commodityPrices) {\r\n    console.log('_commodityPrices ----------> ', JSON.stringify(_commodityPrices))\r\n    return new Promise((resolve, reject) => {\r\n      _commodityPrices.map(metalPrice => {\r\n        this.setCommodityPrice(metalPrice.symbol, metalPrice.price)\r\n      })\r\n      this.sendDataToMessageBroker(_commodityPrices)\r\n      resolve({\r\n        success:true, message : 'commodity prices updated'\r\n      })\r\n    })\r\n  }\r\n\r\n  setCommodityPrice(symbol, price) {\r\n    this.marketDataMap[symbol] = price\r\n  }\r\n\r\n  getCommodityPrices(symbol) {\r\n    var query = (symbol && symbol != 'all') ? {\r\n      symbol\r\n    } : {};\r\n    return new Promise((resolve, reject) => {\r\n      mongoDB.onConnect((err, db, objectId) => {\r\n        if (err) {\r\n          console.error(err.stack);\r\n          reject({\r\n            error: err\r\n          })\r\n        } else {\r\n          db.collection('commodities').find(query, { _id: 0 }).toArray((err, mongoRes) => {\r\n            if (err) {\r\n              console.error(err.stack);\r\n              reject({\r\n                success: 'false', error: err\r\n              })\r\n            } else {\r\n              if (mongoRes.length > 0) {\r\n                mongoRes.map(metal => {\r\n                  if (Object.keys(this.marketDataMap).includes(metal.symbol)) {\r\n                    console.log('metal price found in map ----> ' + this.marketDataMap[metal.symbol])\r\n                    metal.price = this.marketDataMap[metal.symbol]\r\n                  }\r\n                  else {\r\n                    metal.price = this.getNewPrice()\r\n                    this.marketDataMap[metal.symbol] = metal.price\r\n                  }\r\n                  console.log('marketDataMap ----> ' + JSON.stringify(this.marketDataMap))\r\n                  console.log('metal -> ' + JSON.stringify(metal))\r\n                });\r\n                console.log('MongoRes ---> ', JSON.stringify(mongoRes))\r\n                var data = JSON.stringify(mongoRes);\r\n                resolve({\r\n                  success: 'true', message: mongoRes\r\n                });\r\n              } else {\r\n                let message = symbol ? 'symbol - ' + symbol + ' not found' : 'No records found'\r\n                reject({\r\n                  success: 'false', error: message\r\n                })\r\n              }\r\n            }\r\n          })\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  sendDataToMessageBroker(marketData) {\r\n    var options = {\r\n      url: \"http://localhost:8091/addToMarketDataQueue\",\r\n      method: 'POST',\r\n      json: marketData\r\n    };\r\n    request(options, (error, response, body) => {\r\n      if (error) {\r\n        console.error(error)\r\n      }\r\n      console.log(response);\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = MarketDataService;\r\n"]}