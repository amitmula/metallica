{"version":3,"sources":["../../src/routes/routes.js"],"names":["routes","MarketDataService","require","pjson","config","marketDataService","get","req","res","render","title","version","sendStatus","params","id","getCommodityPrices","then","response","end","JSON","stringify","message","catch","err","console","error","endsWith","status","post","setCommodityPrices","body","stack","success","tradeService","save"],"mappings":";;;;;;AAAA;;AAEA,MAAMA,SAAS,sBAAf;AACA,MAAMC,oBAAoBC,QAAQ,8BAAR,CAA1B;AACA,MAAMC,QAAQD,QAAQ,oBAAR,CAAd;AACA,MAAME,SAASF,QAAQ,QAAR,CAAf;;AAEA,MAAMG,oBAAoB,IAAIJ,iBAAJ,EAA1B;AACA;;;AAGAD,OAAOM,GAAP,CAAW,GAAX,EAAgB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5BA,MAAIC,MAAJ,CAAW,OAAX,EAAoB,EAAEC,OAAO,oBAAT,EAA+B,WAAWP,MAAMQ,OAAhD,EAApB;AACD,CAFD;;AAIAX,OAAOM,GAAP,CAAWF,OAAOE,GAAP,CAAW,0BAAX,CAAX,EAAmD,UAASC,GAAT,EAAcC,GAAd,EAAmB;AACpEA,MAAII,UAAJ,CAAe,GAAf;AACD,CAFD;;AAIA;;;AAGAZ,OAAOM,GAAP,CAAW,YAAX,EAAyB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACrC,MAAGD,IAAIM,MAAJ,CAAWC,EAAd,EAAkB;AAChBT,sBAAkBU,kBAAlB,CAAqCR,IAAIM,MAAJ,CAAWC,EAAhD,EAAoDE,IAApD,CAA0DC,YAAY;AACpET,UAAIU,GAAJ,CAAQC,KAAKC,SAAL,CAAeH,SAASI,OAAxB,CAAR;AACD,KAFD,EAEGC,KAFH,CAESC,OAAO;AACdC,cAAQC,KAAR,CAAcF,GAAd;AACA,UAAGA,IAAIE,KAAJ,CAAUC,QAAV,CAAmB,kBAAnB,CAAH,EACElB,IAAImB,MAAJ,CAAW,GAAX;AACFnB,UAAIU,GAAJ,CAAQC,KAAKC,SAAL,CAAeG,GAAf,CAAR;AACD,KAPD;AAQD;AACF,CAXD;;AAaA;;;AAGAvB,OAAO4B,IAAP,CAAY,aAAZ,EAA2B,CAACrB,GAAD,EAAMC,GAAN,KAAc;AACvCH,oBAAkBwB,kBAAlB,CAAqCtB,IAAIuB,IAAzC,EAA+Cd,IAA/C,CAAoDC,YAAY;AAC9DT,QAAIU,GAAJ,CAAQC,KAAKC,SAAL,CAAeH,QAAf,CAAR;AACD,GAFD,EAEGK,KAFH,CAESC,OAAO;AACdC,YAAQC,KAAR,CAAcF,IAAIQ,KAAlB;AACAvB,QAAImB,MAAJ,CAAW,GAAX,EAAgBT,GAAhB,CAAoB,EAACc,SAAU,KAAX,EAAkBP,OAAON,KAAKC,SAAL,CAAeG,GAAf,CAAzB,EAApB;AACD,GALD;AAMD,CAPD;;AASAvB,OAAO4B,IAAP,CAAY,aAAZ,EAA2B,CAACrB,GAAD,EAAMC,GAAN,KAAc;AACvCyB,eAAaC,IAAb,CAAkB3B,IAAIuB,IAAtB,EAA4Bd,IAA5B,CAAkCC,YAAY;AAC5CT,QAAIU,GAAJ,CAAQC,KAAKC,SAAL,CAAeH,QAAf,CAAR;AACD,GAFD,EAEGK,KAFH,CAESC,OAAO;AACdC,YAAQC,KAAR,CAAcF,GAAd;AACAf,QAAIU,GAAJ,CAAQC,KAAKC,SAAL,CAAeG,GAAf,CAAR;AACD,GALD;AAMD,CAPD;;kBAUevB,M","file":"routes.js","sourcesContent":["import { Router } from 'express';\r\n\r\nconst routes = Router();\r\nconst MarketDataService = require('../service/MarketDataService');\r\nconst pjson = require('../../package.json');\r\nconst config = require('config');\r\n\r\nconst marketDataService = new MarketDataService();\r\n/**\r\n * GET home page\r\n */\r\nroutes.get('/', (req, res) => {\r\n  res.render('index', { title: 'MarketData Service', 'version': pjson.version});\r\n});\r\n\r\nroutes.get(config.get('appConfig.healthCheckUrl'), function(req, res) {\r\n  res.sendStatus(200);\r\n});\r\n\r\n/**\r\n * GET all commodity prices\r\n */\r\nroutes.get('/price/:id', (req, res) => {\r\n  if(req.params.id) {\r\n    marketDataService.getCommodityPrices(req.params.id).then( response => {    \r\n      res.end(JSON.stringify(response.message))\r\n    }).catch(err => {\r\n      console.error(err)\r\n      if(err.error.endsWith('No records found'))\r\n        res.status(404)\r\n      res.end(JSON.stringify(err));\r\n    })\r\n  }\r\n});\r\n\r\n/**\r\n * Set commodity prices\r\n */\r\nroutes.post('/price/save', (req, res) => {\r\n  marketDataService.setCommodityPrices(req.body).then(response => {\r\n    res.end(JSON.stringify(response))\r\n  }).catch(err => {\r\n    console.error(err.stack)\r\n    res.status(500).end({success : false, error: JSON.stringify(err)})\r\n  })\r\n});\r\n\r\nroutes.post('/trade/save', (req, res) => {\r\n  tradeService.save(req.body).then( response => {    \r\n    res.end(JSON.stringify(response))\r\n  }).catch(err => {\r\n    console.error(err)\r\n    res.end(JSON.stringify(err));\r\n  })\r\n});\r\n\r\n\r\nexport default routes;\r\n"]}