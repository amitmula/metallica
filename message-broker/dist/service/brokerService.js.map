{"version":3,"sources":["../../src/service/brokerService.js"],"names":["config","require","mqBroker","BrokerService","constructor","console","log","addToTradeQueue","tradeDetails","Promise","resolve","reject","addMessage","get","then","response","success","message","catch","err","error","addToMarketDataQueue","marketDataDetails","module","exports"],"mappings":";;AAAA,MAAMA,SAASC,QAAQ,QAAR,CAAf;AACA,MAAMC,WAAWD,QAAQ,kBAAR,CAAjB;;AAEA,MAAME,aAAN,CAAoB;AAChBC,kBAAc;AACXC,gBAAQC,GAAR,CAAY,mCAAZ;AACF;;AAEDC,oBAAgBC,YAAhB,EAA8B;AAC1B,eAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCT,qBAASU,UAAT,CAAoBZ,OAAOa,GAAP,CAAW,iCAAX,CAApB,EAAmEL,YAAnE,EAAiFM,IAAjF,CAAuFC,YAAY;AAC/FL,wBAAQ;AACJM,6BAAS,MADL,EACaC,SAAUF,SAASE;AADhC,iBAAR;AAGH,aAJD,EAIGC,KAJH,CAISC,OAAO;AACZR,uBAAO;AACHK,6BAAS,OADN,EACeI,OAAQD,IAAIC;AAD3B,iBAAP;AAGH,aARD;AASH,SAVM,CAAP;AAWH;;AAEDC,yBAAqBC,iBAArB,EAAwC;AACpC,eAAO,IAAIb,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCT,qBAASU,UAAT,CAAoBZ,OAAOa,GAAP,CAAW,sCAAX,CAApB,EAAwES,iBAAxE,EAA2FR,IAA3F,CAAiGC,YAAY;AACzGL,wBAAQ;AACJM,6BAAS,MADL,EACaC,SAAUF,SAASE;AADhC,iBAAR;AAGH,aAJD,EAIGC,KAJH,CAISC,OAAO;AACZR,uBAAO;AACHK,6BAAS,OADN,EACeI,OAAQD,IAAIC;AAD3B,iBAAP;AAGH,aARD;AASH,SAVM,CAAP;AAWH;AA/Be;;AAkCpBG,OAAOC,OAAP,GAAiBrB,aAAjB","file":"brokerService.js","sourcesContent":["const config = require('config');\r\nconst mqBroker = require('../mq/mqProducer');\r\n\r\nclass BrokerService {\r\n    constructor() {\r\n       console.log('broker service constructor called')\r\n    }\r\n\r\n    addToTradeQueue(tradeDetails) {\r\n        return new Promise((resolve, reject) => {\r\n            mqBroker.addMessage(config.get(\"RabbitConfig.trade_exchange_key\"), tradeDetails).then( response => {\r\n                resolve({\r\n                    success: 'true', message : response.message\r\n                })\r\n            }).catch(err => {\r\n                reject({\r\n                    success: 'false', error : err.error\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    addToMarketDataQueue(marketDataDetails) {\r\n        return new Promise((resolve, reject) => {\r\n            mqBroker.addMessage(config.get(\"RabbitConfig.marketData_exchange_key\"), marketDataDetails).then( response => {\r\n                resolve({\r\n                    success: 'true', message : response.message\r\n                })\r\n            }).catch(err => {\r\n                reject({\r\n                    success: 'false', error : err.error\r\n                })\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nmodule.exports = BrokerService;\r\n"]}