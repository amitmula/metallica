{"version":3,"sources":["../../src/mq/mqProducer.js"],"names":["amqp","require","config","exports","addMessage","key","msg","connStr","get","console","log","Promise","resolve","reject","connect","err","conn","error","createChannel","ch","ex","assertExchange","durable","publish","Buffer","JSON","stringify","message","setTimeout","close"],"mappings":"AAAA;;AACA,IAAIA,OAAOC,QAAQ,sBAAR,CAAX;AACA,MAAMC,SAASD,QAAQ,QAAR,CAAf;;AAEAE,QAAQC,UAAR,GAAqB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAClC,KAAIC,UAAU,YAAYL,OAAOM,GAAP,CAAW,mBAAX,CAAZ,GAA8C,GAA9C,GAAoDN,OAAOM,GAAP,CAAW,mBAAX,CAAlE;AACAC,SAAQC,GAAR,CAAY,gBAAgBH,OAA5B;AACA,QAAO,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvCb,OAAKc,OAAL,CAAaP,OAAb,EAAsB,CAACQ,GAAD,EAAMC,IAAN,KAAe;AACpC,OAAGD,GAAH,EAAQ;AACPN,YAAQQ,KAAR,CAAcF,GAAd;AACAF,WAAO;AACNI,YAAQF;AADF,KAAP;AAGA;AACDC,QAAKE,aAAL,CAAmB,CAACH,GAAD,EAAMI,EAAN,KAAa;AAC/B,QAAGJ,GAAH,EAAQ;AACPN,aAAQQ,KAAR,CAAcF,GAAd;AACAF,YAAO;AACNI,aAAQF;AADF,MAAP;AAGA;AACD,QAAIK,KAAK,WAAWf,GAApB;AACAI,YAAQC,GAAR,CAAYU,EAAZ;AACAD,OAAGE,cAAH,CAAkBD,EAAlB,EAAsB,OAAtB,EAA+B,EAACE,SAAS,KAAV,EAA/B;AACAH,OAAGI,OAAH,CAAWH,EAAX,EAAef,GAAf,EAAoB,IAAImB,MAAJ,CAAWC,KAAKC,SAAL,CAAepB,GAAf,CAAX,CAApB;AACAM,YAAQ;AACPe,cAAU,wBAAwBP,EAAxB,GAA6B,cAA7B,GAA8C,IAAII,MAAJ,CAAWC,KAAKC,SAAL,CAAepB,GAAf,CAAX,CAA9C,GAAgF;AADnF,KAAR;AAGA,IAdD;AAeAsB,cAAW,YAAW;AAAEZ,SAAKa,KAAL;AAAe,IAAvC,EAAyC,GAAzC;AACA,GAvBD;AAwBA,EAzBM,CAAP;AA0BA,CA7BD","file":"mqProducer.js","sourcesContent":["\"use strict\";\r\nvar amqp = require('amqplib/callback_api');\r\nconst config = require('config');\r\n\r\nexports.addMessage = (key, msg) => {\r\n\tlet connStr = 'amqp://' + config.get('RabbitConfig.host') + ':' + config.get('RabbitConfig.port')\r\n\tconsole.log('connStr -> ' + connStr)\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tamqp.connect(connStr, (err, conn) => {\r\n\t\t\tif(err) {\t\t\t\t\r\n\t\t\t\tconsole.error(err);\r\n\t\t\t\treject({\r\n\t\t\t\t\terror : err\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tconn.createChannel((err, ch) => {\r\n\t\t\t\tif(err) {\r\n\t\t\t\t\tconsole.error(err);\r\n\t\t\t\t\treject({\r\n\t\t\t\t\t\terror : err\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\tvar ex = 'topic_' + key;\r\n\t\t\t\tconsole.log(ex);\r\n\t\t\t\tch.assertExchange(ex, 'topic', {durable: false});\r\n\t\t\t\tch.publish(ex, key, new Buffer(JSON.stringify(msg)));\r\n\t\t\t\tresolve({\r\n\t\t\t\t\tmessage : 'Queued | { topic : ' + ex + ', message : ' + new Buffer(JSON.stringify(msg)) + ' }'\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tsetTimeout(function() { conn.close(); }, 500);\r\n\t\t});\r\n\t});    \r\n}\r\n"]}