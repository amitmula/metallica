{"version":3,"sources":["../src/index.js"],"names":["Eureka","require","config","appPort","process","env","PORT","get","client","instance","app","hostName","ipAddr","port","vipAddress","statusPageUrl","dataCenterInfo","name","eureka","host","servicePath","fetchRegistry","registerWithEureka","maxRetries","listen","console","log","lookup","hostname","err","add","fam","healthCheckUrl","logger","level","start","error","JSON","stringify"],"mappings":";;AAAA;;;;;;AACA,MAAMA,SAASC,QAAQ,kBAAR,EAA4BD,MAA3C;AACA,MAAME,SAASD,QAAQ,QAAR,CAAf;AACA,MAAME,UAAUC,QAAQC,GAAR,CAAYC,IAAZ,IAAoBJ,OAAOK,GAAP,CAAW,gBAAX,CAApC;AACA,MAAMC,SAAS,IAAIR,MAAJ,CAAW;AACxBS,YAAU;AACRC,SAAKR,OAAOK,GAAP,CAAW,iBAAX,CADG;AAERI,cAAU,WAFF;AAGRC,YAAQ,WAHA;AAIRC,UAAM;AACJ,WAAKV,OADD;AAEJ,kBAAY;AAFR,KAJE;AAQRW,gBAAYZ,OAAOK,GAAP,CAAW,iBAAX,CARJ;AASRQ,mBAAe,sBAAsBZ,OAAtB,GAAgCD,OAAOK,GAAP,CAAW,0BAAX,CATvC;AAURS,oBAAgB;AACd,gBAAU,wDADI;AAEdC,YAAM;AAFQ;AAVR,GADc;AAgBxBC,UAAQ;AACNC,UAAMjB,OAAOK,GAAP,CAAW,mBAAX,CADA;AAENM,UAAMX,OAAOK,GAAP,CAAW,mBAAX,CAFA;AAGNa,iBAAalB,OAAOK,GAAP,CAAW,0BAAX,CAHP;AAINc,mBAAenB,OAAOK,GAAP,CAAW,4BAAX,CAJT;AAKNe,wBAAoBpB,OAAOK,GAAP,CAAW,iCAAX,CALd;AAMNgB,gBAAYrB,OAAOK,GAAP,CAAW,yBAAX;AANN;AAhBgB,CAAX,CAAf;AAyBA,cAAIiB,MAAJ,CAAWrB,OAAX,EAAoB,MAAM;AACxBsB,UAAQC,GAAR,CAAY,oBAAZ,EAAkCvB,OAAlC;AACAF,UAAQ,KAAR,EAAe0B,MAAf,CAAsB1B,QAAQ,IAAR,EAAc2B,QAAd,EAAtB,EAAgD,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,GAApB,EAAyB;AACzE,QAAGF,GAAH,EAAQ,MAAMA,GAAN;AACN,QAAIG,iBAAiB,YAAWF,GAAX,GAAgB,GAAhB,GAAsB3B,OAAtB,GAAgCD,OAAOK,GAAP,CAAW,0BAAX,CAArD;AACAkB,YAAQC,GAAR,CAAY,oBAAZ,EAAkCM,cAAlC;AACAxB,WAAOyB,MAAP,CAAcC,KAAd,CAAoB,OAApB;AACA1B,WAAO2B,KAAP,CAAa,UAASC,KAAT,EAAgB;AAC3BX,cAAQC,GAAR,CAAYW,KAAKC,SAAL,CAAeF,KAAf,KAAyB,8BAArC;AACH,KAFC;AAGD,GARD;AASD,CAXD","file":"index.js","sourcesContent":["import app from './app/app';\r\nconst Eureka = require('eureka-js-client').Eureka;\r\nconst config = require('config');\r\nconst appPort = process.env.PORT || config.get('appConfig.port');\r\nconst client = new Eureka({\r\n  instance: {\r\n    app: config.get('appConfig.appId'),\r\n    hostName: 'localhost',\r\n    ipAddr: '127.0.0.1',\r\n    port: {\r\n      '$': appPort,\r\n      '@enabled': 'true',\r\n    },\r\n    vipAddress: config.get('appConfig.appId'),\r\n    statusPageUrl: 'http://localhost:' + appPort + config.get('appConfig.healthCheckUrl'),\r\n    dataCenterInfo: {\r\n      '@class': 'com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo',\r\n      name: 'MyOwn',\r\n    },\r\n  },\r\n  eureka: {\r\n    host: config.get('eurekaConfig.host'),\r\n    port: config.get('eurekaConfig.port'),\r\n    servicePath: config.get('eurekaConfig.servicePath'),\r\n    fetchRegistry: config.get('eurekaConfig.fetchRegistry'),\r\n    registerWithEureka: config.get('eurekaConfig.registerWithEureka'),\r\n    maxRetries: config.get('eurekaConfig.maxRetries')\r\n  },\r\n});\r\napp.listen(appPort, () => {\r\n  console.log('Listening on port ', appPort)\r\n  require('dns').lookup(require('os').hostname(), function (err, add, fam) {\r\n\t\tif(err)\tthrow err;\r\n    var healthCheckUrl = 'http://'+ add +':' + appPort + config.get('appConfig.healthCheckUrl');  \r\n    console.log('healthCheckUrl -->', healthCheckUrl)\r\n    client.logger.level('debug');   \r\n    client.start(function(error) {\r\n      console.log(JSON.stringify(error) || 'Eureka registration complete');   \r\n\t\t});\r\n  });\r\n});"]}